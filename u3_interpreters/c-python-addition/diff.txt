diff --git a/Doc/data/python3.11.abi b/Doc/data/python3.11.abi
index 14ffe9cab2..d85bb131bc 100644

Doc/data/python3.11.abi
@@ -11755,6 +11755,7 @@
       <enumerator name='Pass_kind' value='25'/>
       <enumerator name='Break_kind' value='26'/>
       <enumerator name='Continue_kind' value='27'/>
+      <enumerator name='Until_kind' value='28'/>
     </enum-decl>
     <union-decl name='__anonymous_union__' size-in-bits='384' is-anonymous='yes' visibility='default' filepath='./Include/internal/pycore_ast.h' line='187' column='1' id='type-id-614'>
       <data-member access='private'>
diff --git a/Grammar/python.gram b/Grammar/python.gram
index bae8bc3224..1161bc61b3 100644

Grammar/python.gram
@@ -133,6 +133,7 @@ compound_stmt[stmt_ty]:
     | &('for' | ASYNC) for_stmt
     | &'try' try_stmt
     | &'while' while_stmt
+    | &'until' until_stmt
     | match_stmt
 
 # SIMPLE STATEMENTS
@@ -374,6 +375,13 @@ while_stmt[stmt_ty]:
     | invalid_while_stmt
     | 'while' a=named_expression ':' b=block c=[else_block] { _PyAST_While(a, b, c, EXTRA) }
 
+# Until statement
+# ---------------
+
+until_stmt[stmt_ty]:
+    | invalid_until_stmt
+    | 'until' a=named_expression ':' b=block c=[else_block] { _PyAST_Until(a, b, c, EXTRA) }
+
 # For statement
 # -------------
 
@@ -1300,6 +1308,10 @@ invalid_while_stmt:
     | 'while' named_expression NEWLINE { RAISE_SYNTAX_ERROR("expected ':'") }
     | a='while' named_expression ':' NEWLINE !INDENT {
         RAISE_INDENTATION_ERROR("expected an indented block after 'while' statement on line %d", a->lineno) }
+invalid_until_stmt:
+    | 'until' named_expression NEWLINE { RAISE_SYNTAX_ERROR("expected ':'") }
+    | a='until' named_expression ':' NEWLINE !INDENT {
+        RAISE_INDENTATION_ERROR("expected an indented block after 'until' statement on line %d", a->lineno) }
 invalid_for_stmt:
     | [ASYNC] 'for' star_targets 'in' star_expressions NEWLINE { RAISE_SYNTAX_ERROR("expected ':'") }
     | [ASYNC] a='for' star_targets 'in' star_expressions ':' NEWLINE !INDENT {
diff --git a/Include/internal/pycore_ast.h b/Include/internal/pycore_ast.h
index 36277efe9c..ce4bf48bf2 100644

Include/internal/pycore_ast.h
@@ -177,11 +177,12 @@ struct _mod {
 enum _stmt_kind {FunctionDef_kind=1, AsyncFunctionDef_kind=2, ClassDef_kind=3,
                   Return_kind=4, Delete_kind=5, Assign_kind=6,
                   AugAssign_kind=7, AnnAssign_kind=8, For_kind=9,
-                  AsyncFor_kind=10, While_kind=11, If_kind=12, With_kind=13,
-                  AsyncWith_kind=14, Match_kind=15, Raise_kind=16, Try_kind=17,
-                  TryStar_kind=18, Assert_kind=19, Import_kind=20,
-                  ImportFrom_kind=21, Global_kind=22, Nonlocal_kind=23,
-                  Expr_kind=24, Pass_kind=25, Break_kind=26, Continue_kind=27};
+                  AsyncFor_kind=10, While_kind=11, Until_kind=12, If_kind=13,
+                  With_kind=14, AsyncWith_kind=15, Match_kind=16,
+                  Raise_kind=17, Try_kind=18, TryStar_kind=19, Assert_kind=20,
+                  Import_kind=21, ImportFrom_kind=22, Global_kind=23,
+                  Nonlocal_kind=24, Expr_kind=25, Pass_kind=26, Break_kind=27,
+                  Continue_kind=28};
 struct _stmt {
     enum _stmt_kind kind;
     union {
@@ -260,6 +261,12 @@ struct _stmt {
             asdl_stmt_seq *orelse;
         } While;
 
+        struct {
+            expr_ty test;
+            asdl_stmt_seq *body;
+            asdl_stmt_seq *orelse;
+        } Until;
+
         struct {
             expr_ty test;
             asdl_stmt_seq *body;
@@ -677,6 +684,9 @@ stmt_ty _PyAST_AsyncFor(expr_ty target, expr_ty iter, asdl_stmt_seq * body,
 stmt_ty _PyAST_While(expr_ty test, asdl_stmt_seq * body, asdl_stmt_seq *
                      orelse, int lineno, int col_offset, int end_lineno, int
                      end_col_offset, PyArena *arena);
+stmt_ty _PyAST_Until(expr_ty test, asdl_stmt_seq * body, asdl_stmt_seq *
+                     orelse, int lineno, int col_offset, int end_lineno, int
+                     end_col_offset, PyArena *arena);
 stmt_ty _PyAST_If(expr_ty test, asdl_stmt_seq * body, asdl_stmt_seq * orelse,
                   int lineno, int col_offset, int end_lineno, int
                   end_col_offset, PyArena *arena);
diff --git a/Include/internal/pycore_ast_state.h b/Include/internal/pycore_ast_state.h
index f15b4905ee..a577aad32d 100644

Parser/Python.asdl
@@ -32,6 +32,7 @@ module Python
           | For(expr target, expr iter, stmt* body, stmt* orelse, string? type_comment)
           | AsyncFor(expr target, expr iter, stmt* body, stmt* orelse, string? type_comment)
           | While(expr test, stmt* body, stmt* orelse)
+          | Until(expr test, stmt* body, stmt* orelse)
           | If(expr test, stmt* body, stmt* orelse)
           | With(withitem* items, stmt* body, string? type_comment)
           | AsyncWith(withitem* items, stmt* body, string? type_comment)
diff --git a/Parser/parser.c b/Parser/parser.c
index b2c0cfe3c2..6b0c3cd0a9 100644

Python/Python-ast.c
@@ -156,6 +156,7 @@ void _PyAST_Fini(PyInterpreterState *interp)
     Py_CLEAR(state->USub_singleton);
     Py_CLEAR(state->USub_type);
     Py_CLEAR(state->UnaryOp_type);
+    Py_CLEAR(state->Until_type);
     Py_CLEAR(state->While_type);
     Py_CLEAR(state->With_type);
     Py_CLEAR(state->YieldFrom_type);
@@ -459,6 +460,11 @@ static const char * const While_fields[]={
     "body",
     "orelse",
 };
+static const char * const Until_fields[]={
+    "test",
+    "body",
+    "orelse",
+};
 static const char * const If_fields[]={
     "test",
     "body",
@@ -1141,6 +1147,7 @@ init_types(struct ast_state *state)
         "     | For(expr target, expr iter, stmt* body, stmt* orelse, string? type_comment)\n"
         "     | AsyncFor(expr target, expr iter, stmt* body, stmt* orelse, string? type_comment)\n"
         "     | While(expr test, stmt* body, stmt* orelse)\n"
+        "     | Until(expr test, stmt* body, stmt* orelse)\n"
         "     | If(expr test, stmt* body, stmt* orelse)\n"
         "     | With(withitem* items, stmt* body, string? type_comment)\n"
         "     | AsyncWith(withitem* items, stmt* body, string? type_comment)\n"
@@ -1232,6 +1239,10 @@ init_types(struct ast_state *state)
                                   While_fields, 3,
         "While(expr test, stmt* body, stmt* orelse)");
     if (!state->While_type) return 0;
+    state->Until_type = make_type(state, "Until", state->stmt_type,
+                                  Until_fields, 3,
+        "Until(expr test, stmt* body, stmt* orelse)");
+    if (!state->Until_type) return 0;
     state->If_type = make_type(state, "If", state->stmt_type, If_fields, 3,
         "If(expr test, stmt* body, stmt* orelse)");
     if (!state->If_type) return 0;
@@ -2264,6 +2275,31 @@ _PyAST_While(expr_ty test, asdl_stmt_seq * body, asdl_stmt_seq * orelse, int
     return p;
 }
 
+stmt_ty
+_PyAST_Until(expr_ty test, asdl_stmt_seq * body, asdl_stmt_seq * orelse, int
+             lineno, int col_offset, int end_lineno, int end_col_offset,
+             PyArena *arena)
+{
+    stmt_ty p;
+    if (!test) {
+        PyErr_SetString(PyExc_ValueError,
+                        "field 'test' is required for Until");
+        return NULL;
+    }
+    p = (stmt_ty)_PyArena_Malloc(arena, sizeof(*p));
+    if (!p)
+        return NULL;
+    p->kind = Until_kind;
+    p->v.Until.test = test;
+    p->v.Until.body = body;
+    p->v.Until.orelse = orelse;
+    p->lineno = lineno;
+    p->col_offset = col_offset;
+    p->end_lineno = end_lineno;
+    p->end_col_offset = end_col_offset;
+    return p;
+}
+
 stmt_ty
 _PyAST_If(expr_ty test, asdl_stmt_seq * body, asdl_stmt_seq * orelse, int
           lineno, int col_offset, int end_lineno, int end_col_offset, PyArena
@@ -3973,6 +4009,26 @@ ast2obj_stmt(struct ast_state *state, void* _o)
             goto failed;
         Py_DECREF(value);
         break;
+    case Until_kind:
+        tp = (PyTypeObject *)state->Until_type;
+        result = PyType_GenericNew(tp, NULL, NULL);
+        if (!result) goto failed;
+        value = ast2obj_expr(state, o->v.Until.test);
+        if (!value) goto failed;
+        if (PyObject_SetAttr(result, state->test, value) == -1)
+            goto failed;
+        Py_DECREF(value);
+        value = ast2obj_list(state, (asdl_seq*)o->v.Until.body, ast2obj_stmt);
+        if (!value) goto failed;
+        if (PyObject_SetAttr(result, state->body, value) == -1)
+            goto failed;
+        Py_DECREF(value);
+        value = ast2obj_list(state, (asdl_seq*)o->v.Until.orelse, ast2obj_stmt);
+        if (!value) goto failed;
+        if (PyObject_SetAttr(result, state->orelse, value) == -1)
+            goto failed;
+        Py_DECREF(value);
+        break;
     case If_kind:
         tp = (PyTypeObject *)state->If_type;
         result = PyType_GenericNew(tp, NULL, NULL);
@@ -7019,6 +7075,112 @@ obj2ast_stmt(struct ast_state *state, PyObject* obj, stmt_ty* out, PyArena*
         if (*out == NULL) goto failed;
         return 0;
     }
+    tp = state->Until_type;
+    isinstance = PyObject_IsInstance(obj, tp);
+    if (isinstance == -1) {
+        return 1;
+    }
+    if (isinstance) {
+        expr_ty test;
+        asdl_stmt_seq* body;
+        asdl_stmt_seq* orelse;
+
+        if (_PyObject_LookupAttr(obj, state->test, &tmp) < 0) {
+            return 1;
+        }
+        if (tmp == NULL) {
+            PyErr_SetString(PyExc_TypeError, "required field \"test\" missing from Until");
+            return 1;
+        }
+        else {
+            int res;
+            if (_Py_EnterRecursiveCall(" while traversing 'Until' node")) {
+                goto failed;
+            }
+            res = obj2ast_expr(state, tmp, &test, arena);
+            _Py_LeaveRecursiveCall();
+            if (res != 0) goto failed;
+            Py_CLEAR(tmp);
+        }
+        if (_PyObject_LookupAttr(obj, state->body, &tmp) < 0) {
+            return 1;
+        }
+        if (tmp == NULL) {
+            PyErr_SetString(PyExc_TypeError, "required field \"body\" missing from Until");
+            return 1;
+        }
+        else {
+            int res;
+            Py_ssize_t len;
+            Py_ssize_t i;
+            if (!PyList_Check(tmp)) {
+                PyErr_Format(PyExc_TypeError, "Until field \"body\" must be a list, not a %.200s", _PyType_Name(Py_TYPE(tmp)));
+                goto failed;
+            }
+            len = PyList_GET_SIZE(tmp);
+            body = _Py_asdl_stmt_seq_new(len, arena);
+            if (body == NULL) goto failed;
+            for (i = 0; i < len; i++) {
+                stmt_ty val;
+                PyObject *tmp2 = PyList_GET_ITEM(tmp, i);
+                Py_INCREF(tmp2);
+                if (_Py_EnterRecursiveCall(" while traversing 'Until' node")) {
+                    goto failed;
+                }
+                res = obj2ast_stmt(state, tmp2, &val, arena);
+                _Py_LeaveRecursiveCall();
+                Py_DECREF(tmp2);
+                if (res != 0) goto failed;
+                if (len != PyList_GET_SIZE(tmp)) {
+                    PyErr_SetString(PyExc_RuntimeError, "Until field \"body\" changed size during iteration");
+                    goto failed;
+                }
+                asdl_seq_SET(body, i, val);
+            }
+            Py_CLEAR(tmp);
+        }
+        if (_PyObject_LookupAttr(obj, state->orelse, &tmp) < 0) {
+            return 1;
+        }
+        if (tmp == NULL) {
+            PyErr_SetString(PyExc_TypeError, "required field \"orelse\" missing from Until");
+            return 1;
+        }
+        else {
+            int res;
+            Py_ssize_t len;
+            Py_ssize_t i;
+            if (!PyList_Check(tmp)) {
+                PyErr_Format(PyExc_TypeError, "Until field \"orelse\" must be a list, not a %.200s", _PyType_Name(Py_TYPE(tmp)));
+                goto failed;
+            }
+            len = PyList_GET_SIZE(tmp);
+            orelse = _Py_asdl_stmt_seq_new(len, arena);
+            if (orelse == NULL) goto failed;
+            for (i = 0; i < len; i++) {
+                stmt_ty val;
+                PyObject *tmp2 = PyList_GET_ITEM(tmp, i);
+                Py_INCREF(tmp2);
+                if (_Py_EnterRecursiveCall(" while traversing 'Until' node")) {
+                    goto failed;
+                }
+                res = obj2ast_stmt(state, tmp2, &val, arena);
+                _Py_LeaveRecursiveCall();
+                Py_DECREF(tmp2);
+                if (res != 0) goto failed;
+                if (len != PyList_GET_SIZE(tmp)) {
+                    PyErr_SetString(PyExc_RuntimeError, "Until field \"orelse\" changed size during iteration");
+                    goto failed;
+                }
+                asdl_seq_SET(orelse, i, val);
+            }
+            Py_CLEAR(tmp);
+        }
+        *out = _PyAST_Until(test, body, orelse, lineno, col_offset, end_lineno,
+                            end_col_offset, arena);
+        if (*out == NULL) goto failed;
+        return 0;
+    }
     tp = state->If_type;
     isinstance = PyObject_IsInstance(obj, tp);
     if (isinstance == -1) {
@@ -11980,6 +12142,9 @@ astmodule_exec(PyObject *m)
     if (PyModule_AddObjectRef(m, "While", state->While_type) < 0) {
         return -1;
     }
+    if (PyModule_AddObjectRef(m, "Until", state->Until_type) < 0) {
+        return -1;
+    }
     if (PyModule_AddObjectRef(m, "If", state->If_type) < 0) {
         return -1;
     }

Python/ast.c
@@ -780,6 +780,11 @@ validate_stmt(struct validator *state, stmt_ty stmt)
             validate_body(state, stmt->v.While.body, "While") &&
             validate_stmts(state, stmt->v.While.orelse);
         break;
+    case Until_kind:
+        ret = validate_expr(state, stmt->v.Until.test, Load) &&
+            validate_body(state, stmt->v.Until.body, "Until") &&
+            validate_stmts(state, stmt->v.Until.orelse);
+        break;
     case If_kind:
         ret = validate_expr(state, stmt->v.If.test, Load) &&
             validate_body(state, stmt->v.If.body, "If") &&

Python/ast_opt.c
@@ -935,6 +935,11 @@ astfold_stmt(stmt_ty node_, PyArena *ctx_, _PyASTOptimizeState *state)
         CALL_SEQ(astfold_stmt, stmt, node_->v.While.body);
         CALL_SEQ(astfold_stmt, stmt, node_->v.While.orelse);
         break;
+    case Until_kind:
+        CALL(astfold_expr, expr_ty, node_->v.Until.test);
+        CALL_SEQ(astfold_stmt, stmt, node_->v.Until.body);
+        CALL_SEQ(astfold_stmt, stmt, node_->v.Until.orelse);
+        break;
     case If_kind:
         CALL(astfold_expr, expr_ty, node_->v.If.test);
         CALL_SEQ(astfold_stmt, stmt, node_->v.If.body);

Python/compile.c
@@ -273,7 +273,7 @@ compiler IR.
 
 enum fblocktype { WHILE_LOOP, FOR_LOOP, TRY_EXCEPT, FINALLY_TRY, FINALLY_END,
                   WITH, ASYNC_WITH, HANDLER_CLEANUP, POP_VALUE, EXCEPTION_HANDLER,
-                  EXCEPTION_GROUP_HANDLER, ASYNC_COMPREHENSION_GENERATOR };
+                  EXCEPTION_GROUP_HANDLER, ASYNC_COMPREHENSION_GENERATOR, UNTIL_LOOP };
 
 struct fblockinfo {
     enum fblocktype fb_type;
@@ -1875,6 +1875,10 @@ find_ann(asdl_stmt_seq *stmts)
             res = find_ann(st->v.While.body) ||
                   find_ann(st->v.While.orelse);
             break;
+        case Until_kind:
+            res = find_ann(st->v.Until.body) ||
+                  find_ann(st->v.Until.orelse);
+            break;
         case If_kind:
             res = find_ann(st->v.If.body) ||
                   find_ann(st->v.If.orelse);
@@ -2015,6 +2019,7 @@ compiler_unwind_fblock(struct compiler *c, struct fblockinfo *info,
 {
     switch (info->fb_type) {
         case WHILE_LOOP:
+        case UNTIL_LOOP:
         case EXCEPTION_HANDLER:
         case EXCEPTION_GROUP_HANDLER:
         case ASYNC_COMPREHENSION_GENERATOR:
@@ -2122,7 +2127,7 @@ compiler_unwind_fblock_stack(struct compiler *c, int preserve_tos, struct fblock
         return compiler_error(
             c, "'break', 'continue' and 'return' cannot appear in an except* block");
     }
-    if (loop != NULL && (top->fb_type == WHILE_LOOP || top->fb_type == FOR_LOOP)) {
+    if (loop != NULL && (top->fb_type == WHILE_LOOP || top->fb_type == FOR_LOOP || top->fb_type == UNTIL_LOOP)) {
         *loop = top;
         return 1;
     }
@@ -3228,6 +3233,39 @@ compiler_while(struct compiler *c, stmt_ty s)
     return 1;
 }
 
+static int
+compiler_until(struct compiler *c, stmt_ty s)
+{
+    basicblock *loop, *body, *end, *anchor = NULL;
+    loop = compiler_new_block(c);
+    body = compiler_new_block(c);
+    anchor = compiler_new_block(c);
+    end = compiler_new_block(c);
+    if (loop == NULL || body == NULL || anchor == NULL || end == NULL) {
+        return 0;
+    }
+    compiler_use_next_block(c, loop);
+    if (!compiler_push_fblock(c, WHILE_LOOP, loop, end, NULL)) {
+        return 0;
+    }
+    if (!compiler_jump_if(c, s->v.While.test, end, 1)) {
+        return 0;
+    }
+
+    compiler_use_next_block(c, body);
+    VISIT_SEQ(c, stmt, s->v.While.body);
+    SET_LOC(c, s);
+    if (!compiler_jump_if(c, s->v.While.test, body, 0)) {
+        return 0;
+    }
+
+    compiler_pop_fblock(c, WHILE_LOOP, loop);
+
+    compiler_use_next_block(c, end);
+
+    return 1;
+}
+
 static int
 compiler_return(struct compiler *c, stmt_ty s)
 {
@@ -4114,6 +4152,8 @@ compiler_visit_stmt(struct compiler *c, stmt_ty s)
         return compiler_for(c, s);
     case While_kind:
         return compiler_while(c, s);
+    case Until_kind:
+        return compiler_until(c, s);
     case If_kind:
         return compiler_if(c, s);
     case Match_kind:

Python/symtable.c
@@ -1308,6 +1308,12 @@ symtable_visit_stmt(struct symtable *st, stmt_ty s)
         if (s->v.While.orelse)
             VISIT_SEQ(st, stmt, s->v.While.orelse);
         break;
+    case Until_kind:
+        VISIT(st, expr, s->v.Until.test);
+        VISIT_SEQ(st, stmt, s->v.Until.body);
+        if (s->v.Until.orelse)
+            VISIT_SEQ(st, stmt, s->v.Until.orelse);
+        break;
     case If_kind:
         /* XXX if 0: and lookup_yield() hacks */
         VISIT(st, expr, s->v.If.test);
